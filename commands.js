const db = require('./database');
const config = require('./config');
const utils = require('./utils');

// –î–æ–±–∞–≤–∏–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback queries
const queue = [];
let isProcessing = false;

async function processQueue() {
    if (isProcessing || queue.length === 0) return;
    isProcessing = true;

    const { bot, callbackQuery, text } = queue.shift();
    try {
        await bot.answerCallbackQuery(callbackQuery.id, { text, cache_time: 1 });
    } catch (error) {
        if (error.message.includes('query is too old')) {
            console.log('–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ callback query');
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query:', error);
        }
    }

    isProcessing = false;
    processQueue();
}

function addToQueue(bot, callbackQuery, text) {
    queue.push({ bot, callbackQuery, text });
    processQueue();
}

async function handleStart(bot, msg, match) {
    const chatId = msg.chat.id;
    const referrerId = match[1];

    try {
        let user = await db.findUser(chatId);
        let isNewUser = false;

        if (!user) {
            user = {
                telegramId: chatId,
                username: msg.from.username,
                referredBy: referrerId ? parseInt(referrerId) : null,
                referrals: [],
                uc: 0,
                completedTasks: [],
                lastDailyBonus: null
            };
            isNewUser = true;

            if (referrerId) {
                const referrer = await db.findUser(parseInt(referrerId));
                if (referrer && !referrer.referrals.includes(chatId)) {
                    referrer.referrals.push(chatId);
                    referrer.uc += 2;
                    await db.saveUser(referrer);
                    bot.sendMessage(referrer.telegramId, `–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞! 2 UC –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à —Å—á–µ—Ç. –í–∞—à –±–∞–ª–∞–Ω—Å: ${referrer.uc} UC`);
                }
            }

            await db.saveUser(user);
        }

        const welcomeMessage = isNewUser ?
            `
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤—É—é –Ω–∞–≥—Ä–∞–¥—É!
            ` :
            '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –∑–∞–¥–∞–Ω–∏—è–º?';

        const requiredChannels = await db.getRequiredChannels();
        const channelButtons = requiredChannels.map(channel => [{ text: channel.channelUrl, url: channel.channelUrl }]);

        const keyboard = {
            inline_keyboard: [
                ...channelButtons, [{ text: '‚úî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data: 'check_subscriptions' }]
            ]
        };

        bot.sendMessage(chatId, welcomeMessage, {
            reply_markup: keyboard
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

async function handleCheckSubscriptions(bot, input) {
    const chatId = input.message ? input.message.chat.id : input.chat.id;
    try {
        const requiredChannels = await db.getRequiredChannels();
        let allSubscribed = true;

        for (const channel of requiredChannels) {
            const isSubscribed = await utils.checkSubscription(bot, chatId, channel.channelId);
            if (!isSubscribed) {
                allSubscribed = false;
                break;
            }
        }

        if (allSubscribed) {
            if (input.id) {
                addToQueue(bot, input, '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã!');
            }
            return true;
        } else {
            const keyboard = {
                inline_keyboard: [
                    ...requiredChannels.map(channel => [{ text: channel.channelUrl, url: channel.channelUrl }]), [{ text: '‚úî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data: 'check_subscriptions' }]
                ]
            };
            if (input.id) {
                addToQueue(bot, input, '–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            }
            bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å" –µ—â–µ —Ä–∞–∑.', {
                reply_markup: keyboard
            });
            return false;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
        if (input.id) {
            addToQueue(bot, input, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        return false;
    }
}

async function handleTasks(bot, msg) {
    const chatId = msg.chat.id;

    const mockCallbackQuery = {
        message: msg,
        id: 'mock_id'
    };

    const isSubscribed = await handleCheckSubscriptions(bot, mockCallbackQuery);
    if (!isSubscribed) {
        return;
    }

    try {
        const user = await db.findUser(chatId);
        if (!user) {
            bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é /start');
            return;
        }

        const tasks = await db.getTasks();
        const availableTasks = tasks.filter(task => !user.completedTasks.includes(task.id) && task.completions < task.limit);

        if (availableTasks.length > 0) {
            const message = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:';
            const keyboard = [];
            const firstRow = [];

            availableTasks.forEach((task, index) => {
                if (index < 5) {
                    firstRow.push({ text: `–ó–∞–¥–∞–Ω–∏–µ ${task.id}`, callback_data: `task_${task.id}` });
                } else {
                    keyboard.push([{ text: `–ó–∞–¥–∞–Ω–∏–µ ${task.id}`, callback_data: `task_${task.id}` }]);
                }
            });

            if (firstRow.length > 0) {
                keyboard.unshift(firstRow);
            }

            bot.sendMessage(chatId, message, {
                reply_markup: {
                    inline_keyboard: keyboard
                }
            });
        } else {
            bot.sendMessage(chatId, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –ó–∞–¥–∞–Ω–∏—è:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

async function handleTaskDetails(bot, callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const isSubscribed = await handleCheckSubscriptions(bot, callbackQuery);
    if (!isSubscribed) {
        return;
    }

    const taskId = parseInt(callbackQuery.data.split('_')[1]);
    const tasks = await db.getTasks();
    const task = tasks.find(t => t.id === taskId);

    if (task) {
        const taskMessage = `
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞–Ω–∏–∏:

–ù–∞–≥—Ä–∞–¥–∞: ${task.reward} UC
–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${task.limit - task.completions}

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ! –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã –æ—Ç–ø–∏—à–µ—Ç–µ—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è, –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞–Ω—ã –Ω–∞ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ –≤ –≤–∏–¥–µ –Ω–∞–≥—Ä–∞–¥—ã. –ë–∞–ª–∞–Ω—Å –º–æ–∂–µ—Ç —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã.

–í–æ—Ç –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ
        `;
        bot.editMessageText(taskMessage, {
            chat_id: chatId,
            message_id: callbackQuery.message.message_id,
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª', url: task.channelUrl }],
                    [{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data: `check_${task.id}` }],
                    [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_tasks' }]
                ]
            }
        });
    }
}

async function handleCheckTask(bot, callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const isSubscribed = await handleCheckSubscriptions(bot, callbackQuery);
    if (!isSubscribed) {
        return;
    }

    const taskId = parseInt(callbackQuery.data.split('_')[1]);
    try {
        const user = await db.findUser(chatId);
        const task = (await db.getTasks()).find(t => t.id === taskId);

        if (user && task) {
            const subscriptionStatus = await utils.checkSubscription(bot, chatId, task.channelId);
            if (subscriptionStatus === 'CHAT_NOT_FOUND') {
                addToQueue(bot, callbackQuery, '–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
                return;
            }
            if (subscriptionStatus) {
                if (!user.completedTasks.includes(taskId)) {
                    if (task.completions < task.limit) {
                        user.completedTasks.push(taskId);
                        user.uc += task.reward;
                        task.completions++;
                        await db.saveUser(user);
                        await db.updateTask(task);
                        addToQueue(bot, callbackQuery, `–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${task.reward} UC.`);
                    } else {
                        addToQueue(bot, callbackQuery, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω.');
                    }
                } else {
                    addToQueue(bot, callbackQuery, '–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ.');
                }
            } else {
                addToQueue(bot, callbackQuery, '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            }
        } else {
            addToQueue(bot, callbackQuery, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è:', error);
        addToQueue(bot, callbackQuery, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

module.exports = {
    handleStart,
    handleCheckSubscriptions,
    handleTasks,
    handleTaskDetails,
    handleCheckTask,
};