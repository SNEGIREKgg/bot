const TelegramBot = require('node-telegram-bot-api');
const config = require('./config');
const commands = require('./commands');
const userCommands = require('./userCommands');
const adminCommands = require('./adminCommands');
const utils = require('./utils');
const db = require('./database');

const bot = new TelegramBot(config.token, { polling: true });

// –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
bot.onText(/\/start(?:\s+(\d+))?/, (msg, match) => commands.handleStart(bot, msg, match));
bot.onText(/üìã –ó–∞–¥–∞–Ω–∏—è|\/tasks/, (msg) => commands.handleTasks(bot, msg));
bot.onText(/üëë –õ–∏–¥–µ—Ä—ã|\/leaders/, (msg) => userCommands.handleLeaders(bot, msg));
bot.onText(/üë§ –ü—Ä–æ—Ñ–∏–ª—å|\/profile/, (msg) => userCommands.handleProfile(bot, msg));
bot.onText(/üí∞ –í—ã–≤–æ–¥|\/withdraw/, (msg) => userCommands.handleWithdraw(bot, msg));
bot.onText(/üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞|\/referral/, (msg) => userCommands.handleReferral(bot, msg));
bot.onText(/‚ùì –ü–æ–º–æ—â—å|\/help/, (msg) => userCommands.handleHelp(bot, msg));
bot.onText(/üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å|\/daily/, (msg) => userCommands.handleDailyBonus(bot, msg));

// –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
bot.onText(/‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ|\/addtask/, (msg) => adminCommands.handleAddTask(bot, msg));
bot.onText(/‚ûñ –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ|\/removetask/, (msg) => adminCommands.handleRemoveTask(bot, msg));
bot.onText(/üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª|\/addchannel/, (msg) =>
  adminCommands.handleAddRequiredChannel(bot, msg),
);
bot.onText(/üîá –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª|\/removechannel/, (msg) =>
  adminCommands.handleRemoveRequiredChannel(bot, msg),
);
bot.onText(/üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|\/adminstats/, (msg) => adminCommands.handleAdminStats(bot, msg));

bot.on('callback_query', async (callbackQuery) => {
  const action = callbackQuery.data.split('_')[0];
  switch (action) {
    case 'task':
      await commands.handleTaskDetails(bot, callbackQuery);
      break;
    case 'check':
      await commands.handleCheckTask(bot, callbackQuery);
      break;
    case 'back':
      if (callbackQuery.data === 'back_to_tasks') {
        await commands.handleTasks(bot, callbackQuery.message);
      }
      break;
  }
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  if (config.adminIds.includes(chatId)) {
    const adminKeyboard = utils.getAdminKeyboard();
    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: adminKeyboard });
  } else {
    const userKeyboard = utils.getMainKeyboard();
    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: userKeyboard });
  }
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...!');
