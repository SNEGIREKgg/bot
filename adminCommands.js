const db = require('./database');
const config = require('./config');

async function handleAddTask(bot, msg) {
    const chatId = msg.chat.id;
    if (!config.adminIds.includes(chatId)) {
        return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    bot.sendMessage(chatId, `
–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–õ–∏–º–∏—Ç_–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –ù–∞–≥—Ä–∞–¥–∞ ID_–∫–∞–Ω–∞–ª–∞ –°—Å—ã–ª–∫–∞_–Ω–∞_–∫–∞–Ω–∞–ª

–ü—Ä–∏–º–µ—Ä:
1 2 -1002211473340 https://t.me/jskaaow
  `);

    bot.once('message', async(taskMsg) => {
        const [limit, reward, channelId, channelUrl] = taskMsg.text.split(' ');

        if (!limit || !reward || !channelId || !channelUrl) {
            return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }

        try {
            const newTask = {
                limit: parseInt(limit),
                reward: parseFloat(reward),
                channelId,
                channelUrl,
                completions: 0
            };
            const savedTask = await db.saveTask(newTask);
            bot.sendMessage(chatId, `–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å ID: ${savedTask.id}`);

            // –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏
            const users = await db.getAllUsers();
            const notificationMessage = `
üÜï –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ!

üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${reward} UC
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: ${limit}

–°–∫–æ—Ä–µ–µ –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é, –ø–æ–∫–∞ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞!
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tasks, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è.
      `;

            for (const user of users) {
                try {
                    await bot.sendMessage(user.telegramId, notificationMessage);
                } catch (error) {
                    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`, error);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });
}

async function handleRemoveTask(bot, msg) {
    const chatId = msg.chat.id;
    if (!config.adminIds.includes(chatId)) {
        return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:');

    bot.once('message', async(taskMsg) => {
        const taskId = parseInt(taskMsg.text);

        if (isNaN(taskId)) {
            return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.');
        }

        try {
            const removed = await db.removeTask(taskId);
            if (removed) {
                bot.sendMessage(chatId, `–ó–∞–¥–∞–Ω–∏–µ —Å ID ${taskId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.`);
            } else {
                bot.sendMessage(chatId, `–ó–∞–¥–∞–Ω–∏–µ —Å ID ${taskId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });
}

async function handleAddRequiredChannel(bot, msg) {
    const chatId = msg.chat.id;
    if (!config.adminIds.includes(chatId)) {
        return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    bot.sendMessage(chatId, `
–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
ID_–∫–∞–Ω–∞–ª–∞ –°—Å—ã–ª–∫–∞_–Ω–∞_–∫–∞–Ω–∞–ª

–ü—Ä–∏–º–µ—Ä:
-1001234567890 https://t.me/example_channel
  `);

    bot.once('message', async(channelMsg) => {
        const [channelId, channelUrl] = channelMsg.text.split(' ');

        if (!channelId || !channelUrl) {
            return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }

        try {
            await db.addRequiredChannel({ channelId, channelUrl });
            bot.sendMessage(chatId, '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });
}

async function handleRemoveRequiredChannel(bot, msg) {
    const chatId = msg.chat.id;
    if (!config.adminIds.includes(chatId)) {
        return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    const channels = await db.getRequiredChannels();
    if (channels.length === 0) {
        return bot.sendMessage(chatId, '–ù–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }

    const keyboard = channels.map(channel => [{ text: channel.channelUrl }]);
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
        reply_markup: {
            keyboard: keyboard,
            one_time_keyboard: true,
            resize_keyboard: true
        }
    });

    bot.once('message', async(channelMsg) => {
        const channelUrl = channelMsg.text;
        try {
            const removed = await db.removeRequiredChannel(channelUrl);
            if (removed) {
                bot.sendMessage(chatId, `–ö–∞–Ω–∞–ª ${channelUrl} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö.`);
            } else {
                bot.sendMessage(chatId, `–ö–∞–Ω–∞–ª ${channelUrl} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö.`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });
}

async function handleAdminStats(bot, msg) {
    const chatId = msg.chat.id;
    if (!config.adminIds.includes(chatId)) {
        return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    try {
        const users = await db.getAllUsers();
        const tasks = await db.getTasks();
        const requiredChannels = await db.getRequiredChannels();

        const stats = `
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}
–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${tasks.length}
–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${requiredChannels.length}
–í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ UC: ${users.reduce((sum, user) => sum + user.uc, 0)}
    `;

        bot.sendMessage(chatId, stats);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

module.exports = {
    handleAddTask,
    handleRemoveTask,
    handleAddRequiredChannel,
    handleRemoveRequiredChannel,
    handleAdminStats
};